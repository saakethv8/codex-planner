{"mix": ["", ":parameters (?m - mixture ?f - food)\n    :precondition (and\n        (not (mixture_contains ?m ?f))\n        (forall (?g - food)\n            (or (not (mixture_contains ?m ?g))\n                (mixture_contains ?m ?f))\n        )\n    )\n    :effect (and\n        (mixture_contains ?m ?f)\n    )", ":parameters (?m - mixture ?f - food)\n    :precondition ()\n    :effect (and\n        (mixture_contains ?m ?f)\n    )", ":parameters (?m - mixture ?f - food)\n    :precondition (and \n        (mixture_contains ?m ?f)\n    )\n    :effect (and\n        (mixture_contains ?m ?f)\n        (forall (?g - food)\n            (when (not (= ?g ?f))\n                (mixture_contains ?m ?g))\n        )\n    )"], "pour": ["", ":parameters (?f - food ?c - container)\n    :precondition (and\n        (pourable ?f)\n        (forall (?g - food)\n            (or (not (mixture_contains ?f ?g))\n                (pourable ?g)\n            )\n        )\n    )\n    :effect (and\n        (forall (?g - food)\n            (when (mixture_contains ?f ?g)\n                (placedon ?g ?c)\n            )\n        )\n    )", ":parameters (?f - food ?c - container)\n    :precondition (pourable ?f)\n    :effect (and\n        (placedon ?f ?c)\n        (forall (?d - container)\n            (when (not (= ?d ?c))\n                (not (placedon ?f ?d))\n            )\n        )\n    )", ":parameters (?f - food ?c - container)\n    :precondition (and\n        (pourable ?f)\n    )\n    :effect (and\n        (placedon ?f ?c)\n        (forall (?d - container)\n            (when (not (= ?d ?c))\n                (not (placedon ?f ?d))\n            )\n        )\n    )"], "fry": ["", ":parameters (?f - food)\n    :precondition (and\n        (fryable ?f)\n    )\n    :effect (and\n        (fried ?f)\n    )", ":parameters (?f - food)\n    :precondition (and\n        (fryable ?f)\n    )\n    :effect (and\n        (fried ?f)\n    )", ":parameters (?f - food)\n    :precondition (and\n        (fryable ?f)\n    )\n    :effect (and\n        (fried ?f)\n    )"], "slice": ["", ":parameters (?f - food ?k - knife)\n    :precondition (and \n        (sliceable ?f)\n        (isclean ?k)\n    )\n    :effect (and\n        (sliced ?f)\n        (not (isclean ?k))\n    )", ":parameters (?j - food ?k - knife)\n    :precondition (and \n        (sliceable ?j)\n        (isclean ?k)\n    )\n    :effect (and \n        (sliced ?j)\n        (not (isclean ?k))\n    )", ":parameters (?k - knife ?f - food)\n    :precondition (and \n        (sliceable ?f)\n    )\n    :effect (and\n        (sliced ?f)\n        (not (isclean ?k))\n    )"], "spread": ["", ":parameters (?f - food ?g - food)\n    :precondition (and\n        (spreadable ?f)\n    )\n    :effect (and\n        (spreadon ?f ?g)\n    )", ":parameters (?f - food ?g - food)\n    :precondition (and\n        (spreadable ?f)\n    )\n    :effect (and\n        (spreadon ?f ?g)\n    )", ":parameters (?f - food ?g - food)\n    :precondition (and\n        (spreadable ?f)\n    )\n    :effect (and\n        (spreadon ?f ?g)\n    )"], "wash": ["", ":parameters (?f - food)\n    :precondition ()\n    :effect (and\n        (washed ?f)\n    )", ":parameters (?f - food ?k - tool)\n    :precondition (and\n        (not (isclean ?k))\n    )\n    :effect (and\n        (washed ?f)\n        (isclean ?k)\n    )", ":parameters (?f - food)\n    :precondition ()\n    :effect (and\n        (washed ?f)\n    )"], "clean": ["", ":parameters (?t - tool)\n    :precondition ()\n    :effect (and\n        (isclean ?t)\n    )", ":parameters (?t - tool)\n    :precondition ()\n    :effect (and\n        (isclean ?t)\n    )", ":parameters (?t - tool)\n    :precondition ()\n    :effect (and\n        (isclean ?t)\n    )"], "toast": ["", ":parameters (?t - toast ?tb - toaster)\n    :precondition (and\n        (toastable ?t)\n    )\n    :effect (and\n        (toasted ?t)\n    )\n)\n\n(:action put\n    :parameters (?f - food ?c - container)\n    :precondition ()\n    :effect (and\n        (placedon ?f ?c)\n        (forall (?d - container)\n            (when (not (= ?d ?c)) \n                (not (placedon ?f ?d))\n            )\n        )\n    )", ":parameters (?t - toast)\n    :precondition (and\n        (toastable ?t)\n    )\n    :effect (and\n        (toasted ?t)\n    )", ":parameters (?t - tool ?f - food)\n    :precondition (and\n        (toastable ?f)\n    )\n    :effect (and\n        (toasted ?f)\n        (not (isclean ?t))\n    )"], "put": ["", ":parameters (?f - food ?c - container)\n    :precondition ()\n    :effect (and\n        (placedon ?f ?c)\n    )", ":parameters (?f - food ?c - container)\n    :precondition (and\n        (forall (?d - container)\n            (when (not (= ?d ?c))\n                (not (placedon ?f ?d))\n            )\n        )\n    )\n    :effect (placedon ?f ?c)", ":parameters (?f - food ?c - container)\n    :precondition ()\n    :effect (and\n        (placedon ?f ?c)\n    )"], "serve": ["", ":parameters (?c - container)\n    :precondition ()\n    :effect (served ?c)", ":parameters (?c - container)\n    :precondition ()\n    :effect (served ?c)", ":parameters (?c - container)\n    :precondition ()\n    :effect (and\n        (served ?c)\n    )"], "heat": ["", ":parameters (?f - food)\n    :precondition ()\n    :effect (and\n        (heated ?f)\n    )", ":parameters (?f - food)\n    :precondition (and\n        (heatable ?f)\n    )\n    :effect (and\n        (heated ?f)\n    )", ":parameters (?f - food)\n    :precondition (and\n        (heatable ?f)\n    )\n    :effect (and\n        (heated ?f)\n    )"]}